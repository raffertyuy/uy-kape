name: CI & Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Check what files changed to optimize workflow execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      react: ${{ steps.changes.outputs.react }}
      supabase: ${{ steps.changes.outputs.supabase }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            react:
              - 'src/**'
              - 'package*.json'
              - 'vite.config.ts'
              - 'vitest.config.ts'
              - 'tests/**'
              - 'tsconfig*.json'
            supabase:
              - 'supabase/**'
              - '.env.example'

  ci:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.react == 'true'

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
        env:
          NODE_OPTIONS: "--max-old-space-size=10240"

      - name: Cache Vite dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules/.vite
            dist
          key: ${{ runner.os }}-vite-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('vite.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-vite-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-vite-

      - name: Cache TypeScript compilation
        uses: actions/cache@v4
        with:
          path: |
            **/*.tsbuildinfo
            node_modules/.cache
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json') }}-${{ hashFiles('src/**/*.{ts,tsx}') }}
          restore-keys: |
            ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json') }}-
            ${{ runner.os }}-typescript-

      - name: Install dependencies
        run: npm ci
        env:
          NODE_OPTIONS: "--max-old-space-size=10240"

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Run linting
        run: npm run lint

      - name: Run tests with optimized CI configuration
        run: npm run test:ci-no-coverage
        timeout-minutes: 20
        env:
          NODE_OPTIONS: "--max-old-space-size=10240"
          CI: true
          # Additional environment variables for test stability
          NODE_ENV: test
          FORCE_COLOR: 0

      - name: Build application
        run: npm run build
        env:
          NODE_OPTIONS: "--max-old-space-size=10240"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: tests/outputs/test-results.xml
          retention-days: 30

      # - name: Upload coverage reports to Codecov
      #   if: matrix.node-version == '20.x'
      #   uses: codecov/codecov-action@v5
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      #   with:
      #     fail_ci_if_error: false
      #     verbose: true

  security:
    name: Security and Dependency Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Cache dependencies for faster scanning
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-security-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-security-

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit for React/Supabase dependencies
        run: |
          echo "üîç Checking for security vulnerabilities in dependencies..."
          npm audit --audit-level=moderate || echo "Security issues found - review needed"

      - name: Check for hardcoded Supabase keys or secrets
        run: |
          echo "üîç Scanning for hardcoded secrets..."

          # Check for potential Supabase API keys or secrets
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "(anon|service_role)\.ey[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+" src/; then
            echo "‚ùå Potential hardcoded Supabase keys found!"
            exit 1
          fi

          # Check for URLs with keys
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "https://[a-zA-Z0-9]+\.supabase\.co.*eyJ" src/; then
            echo "‚ùå Potential hardcoded Supabase URLs with keys found!"
            exit 1
          fi

          echo "‚úÖ No hardcoded secrets detected"

      - name: Validate environment variable usage
        run: |
          echo "üîç Validating environment variable patterns..."

          # Check for proper environment variable usage in process.env
          # Allow common CI/Node.js environment variables but warn about others
          PROCESS_ENV_RESULTS=$(grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "process\.env\.[A-Z_]+" src/ | grep -v "VITE_" | grep -v "CI" | grep -v "GITHUB_ACTIONS" | grep -v "NODE_ENV" || true)
          
          if [ -n "$PROCESS_ENV_RESULTS" ]; then
            echo "‚ö†Ô∏è  Non-standard environment variables found:"
            echo "$PROCESS_ENV_RESULTS"
            echo "Ensure they're available at build time"
          fi

          # Check for missing VITE_ prefix on client-side env vars
          # Allow built-in Vite environment variables (DEV, PROD, MODE, BASE_URL, SSR)
          INVALID_ENV_RESULTS=$(grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "import\.meta\.env\.[A-Z_]+" src/ | grep -v "VITE_" | grep -v "\.DEV" | grep -v "\.PROD" | grep -v "\.MODE" | grep -v "\.BASE_URL" | grep -v "\.SSR" || true)
          
          if [ -n "$INVALID_ENV_RESULTS" ]; then
            echo "‚ùå Environment variables must have VITE_ prefix for client-side access:"
            echo "$INVALID_ENV_RESULTS"
            exit 1
          fi

          echo "‚úÖ Environment variable usage looks good"

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  react-security:
    name: React Security Patterns
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.react == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Scan for React security anti-patterns
        run: |
          echo "üîç Scanning for React security anti-patterns..."

          # Check for dangerous innerHTML usage
          if grep -r --include="*.tsx" --include="*.jsx" "dangerouslySetInnerHTML" src/; then
            echo "‚ö†Ô∏è  dangerouslySetInnerHTML usage found - ensure content is sanitized"
          fi

          # Check for eval usage
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "\beval\s*\(" src/; then
            echo "‚ùå eval() usage found - this is a security risk!"
            exit 1
          fi

          # Check for document.write usage
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            "document\.write" src/; then
            echo "‚ùå document.write usage found - this can lead to XSS!"
            exit 1
          fi

          # Check for window.location assignment patterns that might be unsafe
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "window\.location\s*=" src/; then
            echo "‚ö†Ô∏è  Direct window.location assignment found - ensure URL is validated"
          fi

          echo "‚úÖ React security scan completed"
