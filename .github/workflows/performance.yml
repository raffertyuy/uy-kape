name: Vite Performance Analysis

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  bundle-analysis:
    name: Bundle Size and Performance Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Cache Vite build for performance analysis
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules/.vite
            dist
          key: ${{ runner.os }}-performance-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-performance-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-performance-

      - name: Install dependencies
        run: npm ci

      - name: Build with Vite (analyze bundle)
        run: |
          echo "üì¶ Building application with Vite..."
          npm run build

          # Get build output statistics
          BUILD_SIZE=$(du -sh dist | cut -f1)
          echo "Total build size: $BUILD_SIZE"

          # Check for large chunks
          echo "üìä Analyzing chunk sizes..."
          find dist/assets -name "*.js" -exec ls -lh {} \; | sort -k5 -hr | head -10

      - name: Analyze bundle composition
        run: |
          echo "üîç Analyzing bundle composition..."

          # Check for potential optimizations
          echo "## Bundle Analysis Results" > bundle-analysis.md
          echo "" >> bundle-analysis.md

          # JavaScript chunks analysis
          echo "### JavaScript Chunks" >> bundle-analysis.md
          echo "\`\`\`" >> bundle-analysis.md
          find dist/assets -name "*.js" -exec basename {} \; | sort >> bundle-analysis.md
          echo "\`\`\`" >> bundle-analysis.md
          echo "" >> bundle-analysis.md

          # CSS chunks analysis
          echo "### CSS Files" >> bundle-analysis.md
          echo "\`\`\`" >> bundle-analysis.md
          find dist/assets -name "*.css" -exec basename {} \; | sort >> bundle-analysis.md
          echo "\`\`\`" >> bundle-analysis.md
          echo "" >> bundle-analysis.md

          # Check for large files
          echo "### Large Files (>100KB)" >> bundle-analysis.md
          echo "\`\`\`" >> bundle-analysis.md
          find dist -size +100k -type f -exec ls -lh {} \; >> bundle-analysis.md
          echo "\`\`\`" >> bundle-analysis.md

      - name: Check for React component code splitting
        run: |
          echo "üß© Checking for code splitting opportunities..."

          # Look for potential code splitting opportunities
          echo "## Code Splitting Analysis" >> bundle-analysis.md
          echo "" >> bundle-analysis.md

          # Check if React.lazy is used
          LAZY_COUNT=$(grep -r "React.lazy\|lazy(" src/ --include="*.tsx" --include="*.ts" | wc -l || echo "0")
          echo "- React.lazy implementations found: $LAZY_COUNT" >> bundle-analysis.md

          # Check for dynamic imports
          DYNAMIC_IMPORTS=$(grep -r "import(" src/ --include="*.tsx" --include="*.ts" | wc -l || echo "0")
          echo "- Dynamic imports found: $DYNAMIC_IMPORTS" >> bundle-analysis.md

          # Check for route-based splitting
          ROUTE_COMPONENTS=$(find src/pages -name "*.tsx" | wc -l || echo "0")
          echo "- Page components: $ROUTE_COMPONENTS" >> bundle-analysis.md

      - name: Monitor Supabase client bundle impact
        run: |
          echo "üì° Analyzing Supabase bundle impact..."

          echo "## Supabase Bundle Impact" >> bundle-analysis.md
          echo "" >> bundle-analysis.md

          # Check Supabase imports
          SUPABASE_IMPORTS=$(grep -r "@supabase" src/ --include="*.tsx" --include="*.ts" | wc -l || echo "0")
          echo "- Supabase import statements: $SUPABASE_IMPORTS" >> bundle-analysis.md

          # Check if Supabase client is properly tree-shaken
          if grep -r "createClient" src/ --include="*.ts"; then
            echo "- ‚úÖ Supabase client creation found" >> bundle-analysis.md
          else
            echo "- ‚ùå No Supabase client creation found" >> bundle-analysis.md
          fi

      - name: Validate mobile-first performance metrics
        run: |
          echo "üì± Checking mobile performance considerations..."

          echo "## Mobile Performance Considerations" >> bundle-analysis.md
          echo "" >> bundle-analysis.md

          # Check for lazy loading images
          LAZY_IMAGES=$(grep -r "loading.*lazy" src/ --include="*.tsx" | wc -l || echo "0")
          echo "- Lazy-loaded images: $LAZY_IMAGES" >> bundle-analysis.md

          # Check for responsive image usage
          RESPONSIVE_IMAGES=$(grep -r "srcSet\|sizes" src/ --include="*.tsx" | wc -l || echo "0")
          echo "- Responsive image implementations: $RESPONSIVE_IMAGES" >> bundle-analysis.md

          # Check Tailwind CSS purging (should be minimal final CSS)
          CSS_SIZE=$(find dist/assets -name "*.css" -exec cat {} \; | wc -c || echo "0")
          echo "- Total CSS size: $(echo $CSS_SIZE | numfmt --to=iec)" >> bundle-analysis.md

          # Performance recommendations
          echo "" >> bundle-analysis.md
          echo "### Performance Recommendations" >> bundle-analysis.md
          echo "- Ensure images are optimized and use appropriate formats (WebP, AVIF)" >> bundle-analysis.md
          echo "- Consider implementing virtual scrolling for long menu lists" >> bundle-analysis.md
          echo "- Use React.memo for components that don't need frequent re-renders" >> bundle-analysis.md
          echo "- Implement service worker for offline coffee menu access" >> bundle-analysis.md

      - name: Comment PR with performance analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the analysis file
            let analysisContent = '';
            try {
              analysisContent = fs.readFileSync('bundle-analysis.md', 'utf8');
            } catch (error) {
              analysisContent = '‚ùå Bundle analysis failed to generate report.';
            }

            // Create comment body
            const body = `## üì¶ Vite Bundle Analysis Results

            ${analysisContent}

            ---

            This analysis helps ensure optimal performance for mobile coffee ordering. 

            **Key Metrics for Coffee Shop App:**
            - ‚úÖ Fast initial load (< 3s on 3G)
            - ‚úÖ Efficient menu browsing
            - ‚úÖ Smooth ordering experience
            - ‚úÖ Offline-capable menu access
            `;

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
