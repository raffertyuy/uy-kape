name: Vite Performance Analysis

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  bundle-analysis:
    name: Bundle Size and Performance Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Cache Vite build for performance analysis
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules/.vite
            dist
          key: ${{ runner.os }}-performance-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-performance-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-performance-

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          echo "üì¶ Building application..."
          npm run build

          # Get key metrics only
          BUILD_SIZE=$(du -sh dist | cut -f1)
          JS_COUNT=$(find dist/assets -name "*.js" | wc -l)
          CSS_COUNT=$(find dist/assets -name "*.css" | wc -l)
          LARGE_FILES=$(find dist -size +100k -type f | wc -l)

          # Code splitting metrics
          LAZY_COUNT=$(grep -r "React.lazy\|lazy(" src/ --include="*.tsx" --include="*.ts" 2>/dev/null | wc -l || echo "0")
          DYNAMIC_IMPORTS=$(grep -r "import(" src/ --include="*.tsx" --include="*.ts" 2>/dev/null | wc -l || echo "0")

          # Save metrics
          echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV
          echo "JS_COUNT=$JS_COUNT" >> $GITHUB_ENV
          echo "CSS_COUNT=$CSS_COUNT" >> $GITHUB_ENV
          echo "LARGE_FILES=$LARGE_FILES" >> $GITHUB_ENV
          echo "LAZY_COUNT=$LAZY_COUNT" >> $GITHUB_ENV
          echo "DYNAMIC_IMPORTS=$DYNAMIC_IMPORTS" >> $GITHUB_ENV

      - name: Update or create performance comment
        uses: actions/github-script@v7
        with:
          script: |
            const { BUILD_SIZE, JS_COUNT, CSS_COUNT, LARGE_FILES, LAZY_COUNT, DYNAMIC_IMPORTS } = process.env;

            // Concise performance summary
            const body = `## üì¶ Bundle Performance Summary

            | Metric | Value |
            |--------|-------|
            | üìä Total Size | ${BUILD_SIZE} |
            | üß© JS Chunks | ${JS_COUNT} |
            | üé® CSS Files | ${CSS_COUNT} |
            | ‚ö†Ô∏è Large Files (>100KB) | ${LARGE_FILES} |
            | ‚ö° Code Splitting | ${LAZY_COUNT} lazy + ${DYNAMIC_IMPORTS} dynamic |

            ${LARGE_FILES > 0 ? '‚ö†Ô∏è **Consider optimizing large files for better mobile performance**' : '‚úÖ **Bundle size looks good**'}

            <!-- performance-comment-marker -->`;

            // Find existing comment to update
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('<!-- performance-comment-marker -->')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Updated existing performance comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Created new performance comment');
            }
