name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security:
    name: Security and Dependency Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Cache dependencies for faster scanning
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-security-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-security-

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit for React/Supabase dependencies
        run: |
          echo "üîç Checking for security vulnerabilities in dependencies..."
          npm audit --audit-level=moderate || echo "Security issues found - review needed"

      - name: Check for hardcoded Supabase keys or secrets
        run: |
          echo "üîç Scanning for hardcoded secrets..."

          # Check for potential Supabase API keys or secrets
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "(anon|service_role)\.ey[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+" src/; then
            echo "‚ùå Potential hardcoded Supabase keys found!"
            exit 1
          fi

          # Check for URLs with keys
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "https://[a-zA-Z0-9]+\.supabase\.co.*eyJ" src/; then
            echo "‚ùå Potential hardcoded Supabase URLs with keys found!"
            exit 1
          fi

          echo "‚úÖ No hardcoded secrets detected"

      - name: Validate environment variable usage
        run: |
          echo "üîç Validating environment variable patterns..."

          # Check for proper environment variable usage
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "process\.env\.[A-Z_]+" src/ | grep -v "VITE_"; then
            echo "‚ö†Ô∏è  Non-Vite environment variables found - ensure they're available at build time"
          fi

          # Check for missing VITE_ prefix on client-side env vars
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "import\.meta\.env\.[A-Z_]+" src/ | grep -v "VITE_"; then
            echo "‚ùå Environment variables must have VITE_ prefix for client-side access!"
            exit 1
          fi

          echo "‚úÖ Environment variable usage looks good"

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  react-security:
    name: React Security Patterns
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Scan for React security anti-patterns
        run: |
          echo "üîç Scanning for React security anti-patterns..."

          # Check for dangerous innerHTML usage
          if grep -r --include="*.tsx" --include="*.jsx" "dangerouslySetInnerHTML" src/; then
            echo "‚ö†Ô∏è  dangerouslySetInnerHTML usage found - ensure content is sanitized"
          fi

          # Check for eval usage
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "\beval\s*\(" src/; then
            echo "‚ùå eval() usage found - this is a security risk!"
            exit 1
          fi

          # Check for document.write usage
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            "document\.write" src/; then
            echo "‚ùå document.write usage found - this can lead to XSS!"
            exit 1
          fi

          # Check for window.location assignment patterns that might be unsafe
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -E "window\.location\s*=" src/; then
            echo "‚ö†Ô∏è  Direct window.location assignment found - ensure URL is validated"
          fi

          echo "‚úÖ React security scan completed"
