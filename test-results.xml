<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="194" failures="0" errors="0" time="1.1073092">
    <testsuite name="src/config/__tests__/app.config.test.ts" timestamp="2025-08-21T05:29:55.432Z" hostname="LAPTOP-VJTJT6SE" tests="13" failures="0" errors="0" skipped="0" time="0.0026062">
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; appConfig &gt; should load passwords correctly (either from env or defaults)" time="0.0003702">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; appConfig &gt; should have required password properties" time="0.0002787">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; appConfig &gt; should have non-empty password values" time="0.0001203">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; Application Constants &gt; should export correct APP_NAME" time="0.0001046">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; Application Constants &gt; should export correct APP_DESCRIPTION" time="0.0000912">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; Application Constants &gt; should export correct ORDER_STATUS_LABELS" time="0.0002225">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; Application Constants &gt; should have all required order status labels" time="0.0001602">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; DEFAULT_DRINK_OPTIONS &gt; should have all required drink option categories" time="0.0001471">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; DEFAULT_DRINK_OPTIONS &gt; should have correctly structured size option" time="0.0001522">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; DEFAULT_DRINK_OPTIONS &gt; should have correctly structured milk option" time="0.0001437">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; DEFAULT_DRINK_OPTIONS &gt; should have correctly structured sugar option" time="0.0001183">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; DEFAULT_DRINK_OPTIONS &gt; should have correctly structured hot option" time="0.0001148">
        </testcase>
        <testcase classname="src/config/__tests__/app.config.test.ts" name="App Configuration &gt; DEFAULT_DRINK_OPTIONS &gt; should have consistent option structure" time="0.0004354">
        </testcase>
    </testsuite>
    <testsuite name="src/components/__tests__/Layout.test.tsx" timestamp="2025-08-21T05:29:55.435Z" hostname="LAPTOP-VJTJT6SE" tests="7" failures="0" errors="0" skipped="0" time="0.0148385">
        <testcase classname="src/components/__tests__/Layout.test.tsx" name="Layout &gt; renders children correctly" time="0.0012201">
        </testcase>
        <testcase classname="src/components/__tests__/Layout.test.tsx" name="Layout &gt; applies correct CSS classes for responsive design" time="0.0009556">
        </testcase>
        <testcase classname="src/components/__tests__/Layout.test.tsx" name="Layout &gt; maintains proper semantic structure" time="0.0012846">
        </testcase>
        <testcase classname="src/components/__tests__/Layout.test.tsx" name="Layout &gt; displays navigation when not on welcome page" time="0.0052538">
        </testcase>
        <testcase classname="src/components/__tests__/Layout.test.tsx" name="Layout &gt; hides navigation on welcome page" time="0.0006459">
        </testcase>
        <testcase classname="src/components/__tests__/Layout.test.tsx" name="Layout &gt; highlights active navigation links" time="0.0016748">
        </testcase>
        <testcase classname="src/components/__tests__/Layout.test.tsx" name="Layout &gt; has proper accessibility for navigation" time="0.0036795">
        </testcase>
    </testsuite>
    <testsuite name="src/components/__tests__/PasswordProtection.test.tsx" timestamp="2025-08-21T05:29:55.436Z" hostname="LAPTOP-VJTJT6SE" tests="5" failures="0" errors="0" skipped="0" time="0.5122259">
        <testcase classname="src/components/__tests__/PasswordProtection.test.tsx" name="PasswordProtection - Basic Functionality &gt; should render password form when not authenticated" time="0.0491156">
        </testcase>
        <testcase classname="src/components/__tests__/PasswordProtection.test.tsx" name="PasswordProtection - Basic Functionality &gt; should render children when authenticated" time="0.0016072">
        </testcase>
        <testcase classname="src/components/__tests__/PasswordProtection.test.tsx" name="PasswordProtection - Basic Functionality &gt; should update password input value" time="0.2364815">
        </testcase>
        <testcase classname="src/components/__tests__/PasswordProtection.test.tsx" name="PasswordProtection - Basic Functionality &gt; should handle form submission correctly" time="0.2174314">
            <system-err>
Warning: The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="src/components/__tests__/PasswordProtection.test.tsx" name="PasswordProtection - Basic Functionality &gt; should have proper accessibility attributes" time="0.0065811">
        </testcase>
    </testsuite>
    <testsuite name="src/hooks/__tests__/useMenuData.test.ts" timestamp="2025-08-21T05:29:55.437Z" hostname="LAPTOP-VJTJT6SE" tests="9" failures="0" errors="0" skipped="0" time="0.3293276">
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useDrinkCategories &gt; should fetch and return drink categories" time="0.0810609">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useDrinkCategories &gt; should handle errors when fetching categories" time="0.0774202">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useDrinks &gt; should fetch and return drinks" time="0.0788196">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useCreateDrinkCategory &gt; should create a new category successfully" time="0.0158177">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useCreateDrinkCategory &gt; should handle creation errors" time="0.0145585">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useUpdateDrinkCategory &gt; should update a category successfully" time="0.0154053">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useUpdateDrinkCategory &gt; should handle update errors" time="0.0154888">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useDeleteDrinkCategory &gt; should delete a category successfully" time="0.0155158">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuData.test.ts" name="useMenuData hooks &gt; useDeleteDrinkCategory &gt; should handle deletion errors" time="0.0146475">
        </testcase>
    </testsuite>
    <testsuite name="src/hooks/__tests__/useMenuSubscriptions.test.ts" timestamp="2025-08-21T05:29:55.438Z" hostname="LAPTOP-VJTJT6SE" tests="5" failures="0" errors="0" skipped="0" time="0.0040086">
        <testcase classname="src/hooks/__tests__/useMenuSubscriptions.test.ts" name="useMenuSubscriptions &gt; should initialize with default state" time="0.0011149">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuSubscriptions.test.ts" name="useMenuSubscriptions &gt; should set up subscriptions for all menu tables" time="0.0010066">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuSubscriptions.test.ts" name="useMenuSubscriptions &gt; should manage conflict items" time="0.0008012">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuSubscriptions.test.ts" name="useMenuSubscriptions &gt; should clear recent changes" time="0.0005774">
        </testcase>
        <testcase classname="src/hooks/__tests__/useMenuSubscriptions.test.ts" name="useMenuSubscriptions &gt; should clean up subscriptions on unmount" time="0.0004244">
        </testcase>
    </testsuite>
    <testsuite name="src/hooks/__tests__/usePasswordAuth.test.ts" timestamp="2025-08-21T05:29:55.438Z" hostname="LAPTOP-VJTJT6SE" tests="17" failures="0" errors="0" skipped="0" time="0.0098805">
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Initial State &gt; should initialize with unauthenticated state" time="0.0008845">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Initial State &gt; should initialize with unauthenticated state for admin role" time="0.000472">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication from sessionStorage &gt; should restore auth state from sessionStorage for guest" time="0.0004361">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication from sessionStorage &gt; should restore auth state from sessionStorage for admin" time="0.0003768">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication from sessionStorage &gt; should not restore auth state when sessionStorage value is not &quot;true&quot;" time="0.0003864">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication from sessionStorage &gt; should maintain separate auth states for guest and admin" time="0.0006367">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication Process &gt; should authenticate with correct password" time="0.0004781">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication Process &gt; should reject authentication with wrong password" time="0.0003928">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication Process &gt; should authenticate admin with correct admin password" time="0.0004516">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication Process &gt; should handle empty password correctly" time="0.000363">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Authentication Process &gt; should handle case-sensitive passwords" time="0.0004608">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Logout Functionality &gt; should logout and clear sessionStorage" time="0.0005093">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Logout Functionality &gt; should logout admin and clear admin sessionStorage" time="0.0005932">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Logout Functionality &gt; should be safe to logout when not authenticated" time="0.0008188">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Role-based Authentication Isolation &gt; should maintain separate authentication states for different roles" time="0.0009447">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Hook Re-initialization &gt; should handle role changes by re-initializing the hook" time="0.0005845">
        </testcase>
        <testcase classname="src/hooks/__tests__/usePasswordAuth.test.ts" name="usePasswordAuth &gt; Hook Re-initialization &gt; should re-check sessionStorage when role changes" time="0.0007595">
        </testcase>
    </testsuite>
    <testsuite name="src/services/__tests__/menuService.test.ts" timestamp="2025-08-21T05:29:55.440Z" hostname="LAPTOP-VJTJT6SE" tests="13" failures="0" errors="0" skipped="0" time="0.0056831">
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinkCategoriesService &gt; should get all categories" time="0.0004886">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinkCategoriesService &gt; should handle errors when getting categories" time="0.0017463">
            <system-err>
Supabase operation failed: { message: [32m&apos;Database error&apos;[39m }

            </system-err>
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinkCategoriesService &gt; should create a new category" time="0.0003894">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinkCategoriesService &gt; should update an existing category" time="0.0003216">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinkCategoriesService &gt; should delete a category" time="0.0003723">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinksService &gt; should get all drinks" time="0.0002791">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinksService &gt; should get drinks by category" time="0.000231">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; drinksService &gt; should create a new drink" time="0.0002529">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; optionCategoriesService &gt; should get all option categories" time="0.000207">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; optionCategoriesService &gt; should create a new option category" time="0.0002265">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; optionValuesService &gt; should get values by category" time="0.0002086">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; optionValuesService &gt; should create a new option value" time="0.0002188">
        </testcase>
        <testcase classname="src/services/__tests__/menuService.test.ts" name="menuService &gt; optionValuesService &gt; should handle validation errors" time="0.0005203">
            <system-err>
Supabase operation failed: { message: [32m&apos;name is required&apos;[39m }

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/pages/__tests__/MenuManagement.test.tsx" timestamp="2025-08-21T05:29:55.441Z" hostname="LAPTOP-VJTJT6SE" tests="2" failures="0" errors="0" skipped="0" time="0.0225365">
        <testcase classname="src/pages/__tests__/MenuManagement.test.tsx" name="MenuManagement - Basic Rendering &gt; renders the menu management page correctly" time="0.0146039">
        </testcase>
        <testcase classname="src/pages/__tests__/MenuManagement.test.tsx" name="MenuManagement - Basic Rendering &gt; has proper accessibility attributes" time="0.0078468">
        </testcase>
    </testsuite>
    <testsuite name="src/pages/__tests__/WelcomePage.test.tsx" timestamp="2025-08-21T05:29:55.441Z" hostname="LAPTOP-VJTJT6SE" tests="6" failures="0" errors="0" skipped="0" time="0.0155679">
        <testcase classname="src/pages/__tests__/WelcomePage.test.tsx" name="WelcomePage &gt; renders welcome message and app title" time="0.0039871">
        </testcase>
        <testcase classname="src/pages/__tests__/WelcomePage.test.tsx" name="WelcomePage &gt; displays order and admin navigation links" time="0.0030586">
        </testcase>
        <testcase classname="src/pages/__tests__/WelcomePage.test.tsx" name="WelcomePage &gt; has proper accessibility attributes" time="0.003451">
        </testcase>
        <testcase classname="src/pages/__tests__/WelcomePage.test.tsx" name="WelcomePage &gt; is responsive on different screen sizes" time="0.0021328">
        </testcase>
        <testcase classname="src/pages/__tests__/WelcomePage.test.tsx" name="WelcomePage &gt; displays technology stack badges" time="0.0014313">
        </testcase>
        <testcase classname="src/pages/__tests__/WelcomePage.test.tsx" name="WelcomePage &gt; has proper semantic structure" time="0.0013448">
        </testcase>
    </testsuite>
    <testsuite name="src/types/__tests__/app.types.test.ts" timestamp="2025-08-21T05:29:55.442Z" hostname="LAPTOP-VJTJT6SE" tests="12" failures="0" errors="0" skipped="0" time="0.0016178">
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; DrinkOption interface &gt; should have correct required properties" time="0.000249">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; DrinkOption interface &gt; should support all valid types" time="0.000157">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; DrinkOption interface &gt; should allow optional properties" time="0.0000851">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; PasswordAuthState interface &gt; should have correct authentication states" time="0.0001166">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; PasswordAuthState interface &gt; should allow undefined role when unauthenticated" time="0.0000969">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; AppConfig interface &gt; should have required password properties" time="0.0000982">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; OrderFormData interface &gt; should have correct structure for order form" time="0.0001167">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; OrderFormData interface &gt; should support various option types in options field" time="0.0001012">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; DrinkFormData interface &gt; should have correct structure for drink form" time="0.0001063">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; DrinkFormData interface &gt; should support empty options object" time="0.0001326">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; Type compatibility &gt; should allow DrinkOption to be used in DrinkFormData" time="0.0001195">
        </testcase>
        <testcase classname="src/types/__tests__/app.types.test.ts" name="App Types &gt; Type compatibility &gt; should maintain type safety for option types" time="0.0001196">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/__tests__/menuValidation.test.ts" timestamp="2025-08-21T05:29:55.443Z" hostname="LAPTOP-VJTJT6SE" tests="28" failures="0" errors="0" skipped="0" time="0.0035228">
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateDrinkCategory &gt; validates a valid drink category" time="0.0005156">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateDrinkCategory &gt; validates required name field" time="0.000226">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateDrinkCategory &gt; allows null description" time="0.0001467">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateDrink &gt; validates a valid drink" time="0.0002011">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateDrink &gt; validates required name field" time="0.0001606">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateDrink &gt; validates required category_id" time="0.000118">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateOptionCategory &gt; validates a valid option category" time="0.0001655">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateOptionCategory &gt; validates required name field" time="0.0001345">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateOptionValue &gt; validates a valid option value" time="0.000154">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateOptionValue &gt; validates required option_category_id" time="0.0001056">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validateOptionValue &gt; validates required name field" time="0.0000955">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; required &gt; returns error for empty string" time="0.0000809">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; required &gt; returns error for null" time="0.0000711">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; required &gt; returns error for undefined" time="0.0000672">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; required &gt; returns null for valid value" time="0.0000661">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; minLength &gt; returns error for string too short" time="0.0000712">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; minLength &gt; returns null for string of correct length" time="0.000068">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; minLength &gt; returns null for longer string" time="0.0000736">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; maxLength &gt; returns error for string too long" time="0.0000829">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; maxLength &gt; returns null for string of correct length" time="0.0000827">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; maxLength &gt; returns null for shorter string" time="0.000072">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; positiveInteger &gt; returns error for negative number" time="0.0001166">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; positiveInteger &gt; returns error for non-integer" time="0.0000734">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; positiveInteger &gt; returns null for positive integer" time="0.0000705">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; positiveInteger &gt; returns null for zero" time="0.0000655">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; validDisplayOrder &gt; returns error for negative number" time="0.0000691">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; validDisplayOrder &gt; returns error for number too large" time="0.0000658">
        </testcase>
        <testcase classname="src/utils/__tests__/menuValidation.test.ts" name="Menu Validation Utilities &gt; validationRules &gt; validDisplayOrder &gt; returns null for valid number" time="0.0000664">
        </testcase>
    </testsuite>
    <testsuite name="src/components/menu/__tests__/DrinkCard.test.tsx" timestamp="2025-08-21T05:29:55.445Z" hostname="LAPTOP-VJTJT6SE" tests="19" failures="0" errors="0" skipped="0" time="0.0389042">
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Basic Rendering &gt; renders drink information in grid view" time="0.0023819">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Basic Rendering &gt; renders drink information in list view" time="0.0022168">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Basic Rendering &gt; shows inactive status correctly" time="0.0011401">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Basic Rendering &gt; handles missing category gracefully" time="0.0011322">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Basic Rendering &gt; handles missing description gracefully" time="0.001333">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Options Preview Integration &gt; does not show options preview when showOptionsPreview is false" time="0.001169">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Options Preview Integration &gt; does not show options preview by default" time="0.0011442">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Options Preview Integration &gt; shows options preview in grid view when enabled" time="0.0042675">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Options Preview Integration &gt; shows options preview in list view when enabled" time="0.0022985">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Options Preview Integration &gt; handles drink without options preview data gracefully" time="0.0011356">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Options Preview Integration &gt; handles empty options preview array" time="0.0011608">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Action Buttons &gt; calls onEdit when edit button is clicked" time="0.00113">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Action Buttons &gt; calls onManageOptions when options button is clicked" time="0.0012727">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Action Buttons &gt; shows delete confirmation modal when delete button is clicked" time="0.0022368">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Action Buttons &gt; calls onDelete when delete is confirmed" time="0.0045382">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Action Buttons &gt; cancels delete when cancel is clicked" time="0.0025868">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Accessibility &gt; has proper aria labels for action buttons" time="0.0011301">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Accessibility &gt; maintains accessibility when options preview is shown" time="0.0019725">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkCard.test.tsx" name="DrinkCard &gt; Layout Variants &gt; applies different layouts for grid vs list variants" time="0.0043115">
        </testcase>
    </testsuite>
    <testsuite name="src/components/menu/__tests__/DrinkManagement.integration.test.tsx" timestamp="2025-08-21T05:29:55.447Z" hostname="LAPTOP-VJTJT6SE" tests="3" failures="0" errors="0" skipped="0" time="0.072488">
        <testcase classname="src/components/menu/__tests__/DrinkManagement.integration.test.tsx" name="DrinkManagement Integration &gt; should render drink categories and toggle options preview" time="0.0259911">
            <system-err>
⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition.
⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath.

            </system-err>
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkManagement.integration.test.tsx" name="DrinkManagement Integration &gt; should filter drinks by category" time="0.0299476">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkManagement.integration.test.tsx" name="DrinkManagement Integration &gt; should render without crashing when errors occur" time="0.0164448">
        </testcase>
    </testsuite>
    <testsuite name="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" timestamp="2025-08-21T05:29:55.448Z" hostname="LAPTOP-VJTJT6SE" tests="11" failures="0" errors="0" skipped="0" time="0.0102806">
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; renders empty state when no options provided" time="0.0007308">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; renders empty state when options is undefined" time="0.0005339">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; renders options correctly in grid view" time="0.000788">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; renders options correctly in list view" time="0.0009131">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; handles null default values correctly" time="0.0006818">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; truncates long option lists and shows more indicator" time="0.0009988">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; does not show more indicator when all options fit" time="0.0007635">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; applies custom className" time="0.0005425">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; has proper accessibility attributes" time="0.0016603">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; has proper accessibility for more indicator" time="0.0006518">
        </testcase>
        <testcase classname="src/components/menu/__tests__/DrinkOptionsPreview.test.tsx" name="DrinkOptionsPreview &gt; renders different layouts for grid vs list variants" time="0.0017945">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/EmptyState.test.tsx" timestamp="2025-08-21T05:29:55.449Z" hostname="LAPTOP-VJTJT6SE" tests="6" failures="0" errors="0" skipped="0" time="0.0080141">
        <testcase classname="src/components/ui/__tests__/EmptyState.test.tsx" name="EmptyState &gt; renders with title and description" time="0.0014201">
        </testcase>
        <testcase classname="src/components/ui/__tests__/EmptyState.test.tsx" name="EmptyState &gt; renders logo when showLogo is true" time="0.001599">
        </testcase>
        <testcase classname="src/components/ui/__tests__/EmptyState.test.tsx" name="EmptyState &gt; does not render logo when showLogo is false" time="0.0007999">
        </testcase>
        <testcase classname="src/components/ui/__tests__/EmptyState.test.tsx" name="EmptyState &gt; has proper styling classes" time="0.0015084">
        </testcase>
        <testcase classname="src/components/ui/__tests__/EmptyState.test.tsx" name="EmptyState &gt; displays title with proper styling" time="0.0014038">
        </testcase>
        <testcase classname="src/components/ui/__tests__/EmptyState.test.tsx" name="EmptyState &gt; displays description with proper styling" time="0.0011329">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/LoadingSpinner.test.tsx" timestamp="2025-08-21T05:29:55.450Z" hostname="LAPTOP-VJTJT6SE" tests="4" failures="0" errors="0" skipped="0" time="0.0053431">
        <testcase classname="src/components/ui/__tests__/LoadingSpinner.test.tsx" name="LoadingSpinner &gt; renders loading spinner with logo" time="0.0019128">
        </testcase>
        <testcase classname="src/components/ui/__tests__/LoadingSpinner.test.tsx" name="LoadingSpinner &gt; displays loading text" time="0.0009211">
        </testcase>
        <testcase classname="src/components/ui/__tests__/LoadingSpinner.test.tsx" name="LoadingSpinner &gt; has proper animation classes" time="0.0013355">
        </testcase>
        <testcase classname="src/components/ui/__tests__/LoadingSpinner.test.tsx" name="LoadingSpinner &gt; is centered properly" time="0.0010824">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/Logo.test.tsx" timestamp="2025-08-21T05:29:55.451Z" hostname="LAPTOP-VJTJT6SE" tests="10" failures="0" errors="0" skipped="0" time="0.0177964">
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; renders with correct size variant" time="0.0012573">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; renders hero size with responsive classes" time="0.0010755">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; applies custom className properly" time="0.0010637">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; displays appropriate alt text for accessibility" time="0.0010614">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; uses default alt text when none provided" time="0.0011315">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; handles click events when onChick prop is provided" time="0.0014147">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; is keyboard accessible when clickable" time="0.0015697">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; maintains aspect ratio across all sizes" time="0.0053212">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; renders without onClick as a non-interactive element" time="0.0012036">
        </testcase>
        <testcase classname="src/components/ui/__tests__/Logo.test.tsx" name="Logo Component &gt; has proper loading attributes for performance" time="0.0025365">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/ToggleSwitch.test.tsx" timestamp="2025-08-21T05:29:55.452Z" hostname="LAPTOP-VJTJT6SE" tests="24" failures="0" errors="0" skipped="0" time="0.0326674">
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Basic Rendering &gt; renders with required props" time="0.0019595">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Basic Rendering &gt; renders with description when provided" time="0.0008686">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Basic Rendering &gt; applies custom className" time="0.0007046">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; State Management &gt; reflects checked state correctly" time="0.0013588">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; State Management &gt; reflects unchecked state correctly" time="0.0014304">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; State Management &gt; calls onChange when clicked" time="0.0016195">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; State Management &gt; calls onChange with opposite value when clicked" time="0.0016534">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Keyboard Interaction &gt; toggles on Space key press" time="0.0017645">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Keyboard Interaction &gt; toggles on Enter key press" time="0.0014468">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Keyboard Interaction &gt; does not toggle on other key presses" time="0.001314">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Disabled State &gt; renders as disabled when disabled prop is true" time="0.0015148">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Disabled State &gt; does not call onChange when disabled and clicked" time="0.0013918">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Disabled State &gt; does not call onChange when disabled and key pressed" time="0.0014832">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Disabled State &gt; applies disabled styling to label and description" time="0.0008239">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Size Variants &gt; applies small size classes" time="0.0014659">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Size Variants &gt; applies medium size classes (default)" time="0.0014386">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Size Variants &gt; applies large size classes" time="0.0013218">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Size Variants &gt; uses medium size as default" time="0.0014718">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Accessibility &gt; has proper ARIA attributes" time="0.0013365">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Accessibility &gt; links to description with aria-describedby when description provided" time="0.0012883">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Accessibility &gt; does not have aria-describedby when no description" time="0.0012119">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Accessibility &gt; label is associated with toggle" time="0.0006454">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Focus Management &gt; can receive focus" time="0.0015277">
        </testcase>
        <testcase classname="src/components/ui/__tests__/ToggleSwitch.test.tsx" name="ToggleSwitch &gt; Focus Management &gt; has focus ring classes" time="0.001236">
        </testcase>
    </testsuite>
</testsuites>
